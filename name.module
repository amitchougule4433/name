<?php
// $Id$

/**
 * @file
 * Defines a persons name field type.
 */


/**
 * Helper function to statically cache the translated
 * name parts.
 * @return
 *   A keyed array of name parts
 */
function _name_field_parts() {
  $parts = &drupal_static(__FUNCTION__, array());

  if (empty($parts)) {
    $parts = array(
      'title' => t('Title'),
      'name' => t('Name'),
      'firstname' => t('First name'),
      'middlename' => t('Middle name'),
      'lastname' => t('Last name'),
      'credentials' => t('Credentials'),
    );
  }
  return $parts;
}

/**
 * Helper function to get the columns for a given field.
 */
function _name_field_columns($type) {
  switch ($type) {
    case 'name_name':
      return array('title', 'name');
    case 'name_short':
      return array('firstname', 'lastname');
    case 'name_standard':
      return array('title', 'firstname', 'lastname');
    case 'name_full':
      return array('title', 'firstname', 'middlename', 'lastname');
    case 'name_extended':
      return array('title', 'firstname', 'middlename', 'lastname', 'credentials');
  }
  //drupal_set_message(t('Invalid type detected: %type', array('%type' => $type)));
  return array();
}

/**
 * Implement hook_theme().
 */
function name_theme() {
  return array(
    'name_element' => array('arguments' => array('element' => NULL)),
  );
}

/**
 * Implement hook_field_info().
 */
function name_field_info() {
  return array(
    'name_name' => array(
      'label' => t('Name: Mr "John Doe"'),
      'description' => t('This field stores a users title and name in the database.'),
      'settings' => array(
        'required_components' => array('name'),
        'title_options' => "Mr.\nMrs.\nMiss\nMs.\nDr.\nProf.",
        'max_length_title' => 31, 'max_length_name' => 255,
      ),
      'instance_settings' => array(),
      'default_widget' => 'name_textfields',
      'default_formatter' => 'name_default',
    ),
    'name_short' => array(
      'label' => t('Name: John Doe'),
      'description' => t('This field stores a users firstname and lastname in the database.'),
      'settings' => array(
        'required_components' => array('firstname', 'lastname'),
        'max_length_firstname' => 63, 'max_length_lastname' => 63,
      ),
      'instance_settings' => array(),
      'default_widget' => 'name_textfields',
      'default_formatter' => 'name_default',
    ),
    'name_standard' => array(
      'label' => t('Name: Mr John Doe'),
      'description' => t('This field stores a users title, firstname and lastname in the database.'),
      'settings' => array(
        'required_components' => array('firstname', 'lastname'),
        'title_options' => "Mr.\nMrs.\nMiss\nMs.\nDr.\nProf.",
        'max_length_title' => 31, 'max_length_firstname' => 63, 'max_length_lastname' => 63,
      ),
      'instance_settings' => array(),
      'default_widget' => 'name_textfields',
      'default_formatter' => 'name_default',
    ),
    'name_full' => array(
      'label' => t('Name: Mr John A. Doe'),
      'description' => t('This field stores a users title, firstname, middlename and lastname in the database.'),
      'settings' => array(
        'required_components' => array('firstname', 'lastname'),
        'title_options' => "Mr.\nMrs.\nMiss\nMs.\nDr.\nProf.",
        'max_length_title' => 31, 'max_length_firstname' => 63, 'max_length_middlename' => 127, 'max_length_lastname' => 63,
      ),
      'instance_settings' => array(),
      'default_widget' => 'name_textfields',
      'default_formatter' => 'name_default',
    ),
    'name_extended' => array(
      'label' => t('Name: Mr John A. Doe, PhD'),
      'description' => t('This field stores a users title, firstname, middlename, lastname and credentials in the database.'),
      'settings' => array(
        'required_components' => array('firstname', 'lastname'),
        'title_options' => "Mr.\nMrs.\nMiss\nMs.\nDr.\nProf.",
        'max_length_title' => 31, 'max_length_firstname' => 63, 'max_length_middlename' => 127, 'max_length_lastname' => 63, 'max_length_credentials' => 255,
      ),
      'instance_settings' => array(),
      'default_widget' => 'name_textfields',
      'default_formatter' => 'name_default',
    ),
  );
}

/**
 * Implement hook_field_schema().
 */
function name_field_schema($field) {
  // Defaults will be already set, but lazy setting of the $columns
  // below requires this check.
  $field['settings'] += array(
    'max_length_title' => 31,
    'max_length_name' => 255,
    'max_length_firstname' => 63,
    'max_length_middlename' => 127,
    'max_length_lastname' => 63,
    'max_length_credentials' => 255,
  );
  $columns = array(
    'title' => array('type' => 'varchar', 'length' => $field['settings']['max_length_title'], 'not null' => FALSE),
    'name' => array('type' => 'varchar', 'length' => $field['settings']['max_length_name'], 'not null' => FALSE),
    'firstname' => array('type' => 'varchar', 'length' => $field['settings']['max_length_firstname'], 'not null' => FALSE),
    'middlename' => array('type' => 'varchar', 'length' => $field['settings']['max_length_middlename'], 'not null' => FALSE),
    'lastname' => array('type' => 'varchar', 'length' => $field['settings']['max_length_lastname'], 'not null' => FALSE),
    'credentials' => array('type' => 'varchar', 'length' => $field['settings']['max_length_credentials'], 'not null' => FALSE),
  );
  $required_columns = _name_field_columns($field['type']);
  $columns = array_intersect_key($columns, array_flip($required_columns));
  $indexes = array();
  switch ($field['type']) {
    case 'name_name':
      $indexes = array('fullname' => array('name'));
      break;
    case 'name_short':
      $indexes = array('fullname' => array('firstname', 'lastname'));
      break;
    case 'name_standard':
      $indexes = array('fullname' => array('firstname', 'lastname'));
      break;
    case 'name_full':
      $indexes = array('fullname' => array('firstname', 'middlename', 'lastname'));
      break;
    case 'name_extended':
      $indexes = array('fullname' => array('firstname', 'middlename', 'lastname'));
      break;
  }
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implement hook_field_settings_form().
 */
function name_field_settings_form($field, $instance) {
  $columns = _name_field_columns($field['type']);
  $name_parts = _name_field_parts();
  $settings = $field['settings'];
  $form['required_components'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Required components'),
    '#default_value' => $settings['required_components'],
    '#required' => FALSE,
    '#description' => t('If the field is required, you need to select the required components.'),
    '#options' => array_intersect_key($name_parts, array_flip($columns)),
  );
  foreach ($columns as $column) {
    $form['max_length_' . $column] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum length for !title', array('!title' => $name_parts[$column])),
      '#default_value' => $settings['max_length_' . $column],
      '#required' => FALSE,
      '#size' => 10,
      '#description' => t('The maximum length of the field in characters. Leave blank for an unlimited size.'),
      '#element_validate' => array('_element_validate_integer_positive'),
    );
  }
  if (in_array('title', $columns)) {
    $form['title_options'] = array(
      '#type' => 'textarea',
      '#title' => t('Title options'),
      '#default_value' => $settings['title_options'],
      '#required' => TRUE,
      '#element_validate' => array('_element_validate_title_options_size'),
      '#description' => t("Enter one title per line. Prefix a line using '--' to specifiy a blank value text. For example: '--Please select a title'"),
    );
  }
  return $form;
}


/**
 * Helper form element validator: integer > 0.
 */
function _element_validate_title_options_size($element, &$form_state) {
  $values = array_filter(explode("\n", $element['#value']));
  $max_length = $form_state['values']['field']['settings']['max_length_title'];
  $long_options = array();
  $options = array();
  foreach ($values as $value) {
    $value = trim($value);
    // Blank option - anything goes!
    if (strpos($value, '--') === 0) {
      $options [] = $value;
    }
    elseif (drupal_strlen($value) > $max_length) {
      $long_options [] = $value;
    }
    elseif (!empty($value)) {
      $options [] = $value;
    }
  }
  if (count($long_options)) {
    form_error($element, t('The following options exceed the maximun allowed title length: %options', array('%options' => implode(', ', $long_options))));
  }
  elseif (empty($options)) {
    form_error($element, t('%field are required.', array('%field' => t('Title options'))));
  }
  else {
    form_set_value($element, implode("\n", $options), $form_state);
  }
}

/**
 * Implement hook_field_instance_settings_form().
 *
 * @todo - Remove if unused, this is just a placeholder function.
 */
function name_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();
  return $form;
}

/**
 * Implement hook_field_validate().
 */
function name_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
  $required_columns = _name_field_columns($field['type']);
  $name_parts = _name_field_parts();
  $settings = $field['settings'];

  foreach ($items as $delta => $item) {
    foreach ($required_columns as $column) {
      if (!empty($item[$column])) {
        $max = $field['settings']['max_length_' . $column];
        if (!empty($max) && drupal_strlen($item[$column]) > $max) {
          $message = t('%name: the !title text may not be longer than %max characters.', array('%name' => $instance['label'], '!title' => $name_parts[$column], '%max' => $max));
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => "name_{$column}_length",
            'message' => $message,
          );
        }
      }
    }
  }
}

/**
 * Implement hook_field_load().
 *
 * @see name_field_sanitize().
 */
function name_field_load($obj_type, $objects, $field, $instances, $langcode, &$items) {
  $required_columns = _name_field_columns($field['type']);
  foreach ($objects as $id => $object) {
    foreach ($items[$id] as $delta => $item) {
      foreach ($required_columns as $column) {
        if (isset($item[$column])) {
          $items[$id][$delta]['safe_' . $column] = check_plain($item[$column]);
        }
      }
    }
  }
}

/**
 * Implement hook_field_sanitize().
 *
 * @see name_field_load()
 */
function name_field_sanitize($obj_type, $object, $field, $instance, $langcode, &$items) {
  $required_columns = _name_field_columns($field['type']);
  foreach ($items as $delta => $item) {
    if (!isset($items[$delta]['safe'])) {
      foreach ($required_columns as $column) {
        if (isset($item[$column])) {
          $items[$delta]['safe_' . $column] = check_plain($item[$column]);
        }
      }
    }
  }
}

/**
 * Implement hook_field_is_empty().
 */
function name_field_is_empty($item, $field) {
  $required_columns = _name_field_columns($field['type']);
  foreach ($required_columns as $column) {
    if ($column != 'title' && isset($item[$column]) && drupal_strlen(trim($item[$column]))) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implement hook_field_formatter_info().
 */
function name_field_formatter_info() {
  return array(
    'name_default' => array(
      'label' => t('Title name(s)'),
      'field types' => array('name_name', 'name_short', 'name_standard', 'name_full', 'name_extended'),
    ),
    'name_short' => array(
      'label' => t('Name(s)'),
      'field types' => array('name_name', 'name_short', 'name_standard', 'name_full', 'name_extended'),
    ),
    'name_complete' => array(
      'label' => t('Title name(s), credentials'),
      'field types' => array('name_extended'),
    ),
  );
}

/**
 * Theme function available for the all name fields.
 * Formatter display name: Name(s)
 */
function theme_field_formatter_name_short($element) {
  $name = isset($element['#item']['safe_firstname']) ? $element['#item']['safe_firstname'] : '';
  $name .= isset($element['#item']['safe_lastname']) ? ' ' . $element['#item']['safe_lastname'] : '';
  $name .= isset($element['#item']['safe_name']) ? ' ' . $element['#item']['safe_name'] : '';
  return trim($name);
}

/**
 * Theme function available for the all name fields.
 * Formatter display name: Title name(s)
 */
function theme_field_formatter_name_default($element) {
  $name = isset($element['#item']['safe_title']) ? $element['#item']['safe_title'] : '';
  $name .= isset($element['#item']['safe_name']) ? ' ' . $element['#item']['safe_name'] : '';
  $name .= isset($element['#item']['safe_firstname']) ? ' ' . $element['#item']['safe_firstname'] : '';
  $name .= isset($element['#item']['safe_lastname']) ? ' ' . $element['#item']['safe_lastname'] : '';
  return trim($name);
}

/**
 * Theme function available for the extended name field.
 * Fields: "Mr John A. Doe, PhD" only
 * Formatter display name: Title name(s), credentials
 */
function theme_field_formatter_name_complete($element) {
  $name = isset($element['#item']['safe_title']) ? $element['#item']['safe_title'] : '';
  $name .= isset($element['#item']['safe_name']) ? ' ' . $element['#item']['safe_name'] : '';
  $name .= isset($element['#item']['safe_firstname']) ? ' ' . $element['#item']['safe_firstname'] : '';
  $name .= isset($element['#item']['safe_middlename']) ? ' ' . $element['#item']['safe_middlename'] : '';
  $name .= isset($element['#item']['safe_lastname']) ? ' ' . $element['#item']['safe_lastname'] : '';
  $name .= isset($element['#item']['safe_credentials']) ? ', <em>' . $element['#item']['safe_credentials'] . '</em>' : '';
  return trim($name);
}

/**
 * Implement hook_field_widget_info().
 */
function name_field_widget_info() {
  return array(
    'name_textfields' => array(
      'label' => t('Name'),
      'field types' => array('name_name', 'name_short', 'name_standard', 'name_full', 'name_extended'),
      'settings' => array(
        'size_name' => 60, 'size_firstname' => 25, 'size_lastname' => 25,
        'size_credentials' => 40, 'size_middlename' => 25,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implement hook_field_widget_settings_form().
 */
function name_field_widget_settings_form($field, $instance) {
  $required_columns = _name_field_columns($field['type']);
  $name_parts = _name_field_parts();

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form = array();
  // TODO - Implement these settings
  foreach ($required_columns as $column) {
    if ($column != 'title') {
      $form['size_'  . $column] = array(
        '#type' => 'textfield',
        '#title' => t('Size of !title textfield', array('!title' => $name_parts[$column])),
        '#default_value' => $settings['size_'  . $column],
        '#required' => TRUE,
        '#element_validate' => array('_element_validate_integer_positive'),
      );
    }
  }

  return $form;
}

/**
 * Implement hook_element_info().
 */
function name_element_info() {
  $parts = _name_field_parts();
  $types['name_element'] = array(
    '#input' => TRUE,
    '#columns' => array(array_keys($parts)),
    '#settings' => array(),
    '#delta' => 0,
    '#process' => array('name_element_process'),
    '#theme_wrappers' => array('name_element'),
    '#autocomplete_path' => FALSE,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'name') . '/name.css'),
    ),

  );
  return $types;
}

/**
 * Implement hook_field_widget().
 */
function name_field_widget(&$form, &$form_state, $field, $instance, $langcode, $items, $delta = 0) {
  $element = array(
    '#type' => 'name_element',
    '#title' => $instance['label'],
    '#cardinality' => $field['cardinality'],
    '#columns' => _name_field_columns($field['type']),
    '#settings' => $field['settings'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : array(),
  );
  // TODO: Label gets lost! Field bug??
  $element['#settings']['title'] = $instance['label'];
  // Parse the title options
  if (isset($field['settings']['title_options'])) {
    $title_options = explode("\n", $field['settings']['title_options']);
    $blank = NULL;
    foreach($title_options as $index => $title_option) {
      if (strpos($title_option, '--') !== FALSE) {
        $blank = drupal_substr($title_option, 2);
        unset($title_options[$index]);
      }
    }
    $title_options = drupal_map_assoc($title_options);
    if (isset($blank)) {
      $title_options = array('' => $blank) + $title_options;
    }
    $element['#title_options'] = $title_options;
  }
  return $element;
}

/**
 * Implement hook_field_widget_error().
 */
function name_field_widget_error($element, $error) {
  $column = str_replace('name_', '', str_replace('_length', '', $error['error']));
  $error_element = isset($element[$column]) ? $element[$column] : $element;
  form_error($error_element, $error['message']);
}

/**
 * Process an individual element.
 */
function name_element_process($element, $form_state, $form) {
  $name_parts = _name_field_parts();
  foreach ($element['#columns'] as $column) {
    if ($column == 'title') {
      $options = isset($element['#title_options']) ? $element['#title_options'] : array();
      $element[$column] = array(
        '#type' => 'select',
        '#default_value' => isset($element['#value'][$column]) ? $element['#value'][$column] : NULL,
        '#attributes' => array('class' => array('name name-' . $column)),
        '#title' => $name_parts[$column],
        '#options' => $options,
      );
    }
    else {
      $element[$column] = array(
        '#type' => 'textfield',
        '#default_value' => isset($element['#value'][$column]) ? $element['#value'][$column] : NULL,
        '#attributes' => array('class' => array('name name-' . $column)),
        '#title' => $name_parts[$column],
      );
      if (isset($element['#settings']) && isset($element['#settings']['max_length_' . $column])) {
        $element[$column]['#maxlength'] = $element['#settings']['max_length_' . $column];
      }
    }
  }
  $element['#element_validate'] = array('_element_validate_has_partial_name');
  if ($element['#required']) {
    $element['#element_validate'][] = '_name_element_validate_is_required';
  }
  return $element;
}

/**
 * Helper form element validator: based on the attributes
 * '#columns' and '#settings][required_components'.
 */
function _element_validate_has_partial_name($element, &$form_state) {
  $element += array('#columns' => array(), '#settings' => array());
  $element['#settings'] += array('required_components' => array(), 'title' => t('field'));
  $required_components = array_filter($element['#settings']['required_components']);
  $title = empty($element['#title']) ? $element['#settings']['title'] : $element['#title'];
  // Nothing checked as required, so assume all columns are required.
  if (empty($required_components)) {
    $required_components = $element['#columns'];
  }
  $value = $element['#value'];
  if (count($required_components)) {
    $required_columns_found = array();
    $required_columns_missing = array();
    $columns_found = array();
    foreach ($element['#columns'] as $column) {
      if (isset($required_components[$column])) {
        if (isset($value[$column]) && drupal_strlen(trim($value[$column]))) {
          $required_columns_found[] = $column;
        }
        else {
          $required_columns_missing[] = $column;
        }
      }
      if ($column != 'title' && isset($value[$column]) && drupal_strlen(trim($value[$column]))) {
        $columns_found[] = $column;
      }
    }
    // Generate a list of the valid parts
    $column_names = _name_field_parts();
    $parts = array();
    foreach ($element['#columns'] as $column) {
      if (isset($required_components[$column])) {
        $parts[] = $column_names[$column];
      }
    }
    if (count($required_columns_found)) {
      if (count($required_columns_missing)) {
        $first_error = current($required_columns_missing);
        form_error($element[$first_error], t('%name requires each of the following parts to be considered a valid name: !parts', array('%name' => $title, '!parts' => implode(', ', $parts))));
      }
    }
    elseif (count($columns_found)) {
      $first_error = current($required_components);
      form_error($element[$first_error], t('%name requires each of the following parts to be considered a valid name: !parts', array('%name' => $title, '!parts' => implode(', ', $parts))));
    }
  }
}

/**
 * Helper form element validator: based on the attributes
 * '#columns' and '#settings][required_components'.
 */
function _name_element_validate_is_required($element, &$form_state) {
  $element += array('#columns' => array(), '#settings' => array());
  $element['#settings'] += array('required_components' => array(), 'title' => t('field'));
  $required_components = array_filter($element['#settings']['required_components']);
  $title = empty($element['#title']) ? $element['#settings']['title'] : $element['#title'];

  // Nothing checked as required, so assume all columns are required.
  if (empty($required_components)) {
    $required_components = $element['#columns'];
  }
  $value = $element['#value'];
  if (count($required_components)) {
    $required_columns_found = array();
    foreach ($element['#columns'] as $column) {
      if (isset($required_components[$column])) {
        if (isset($value[$column]) && drupal_strlen(trim($value[$column]))) {
          $required_columns_found[] = $column;
        }
      }
    }
    if (count($required_columns_found) == 0) {
      $column_names = _name_field_parts();
      $parts = array();
      $first_key = current($required_components);
      foreach ($element['#columns'] as $column) {
        if (isset($required_components[$column])) {
          $parts[] = $column_names[$column];
        }
      }
      form_error($element[$first_key], t('%name is required. This must include all of these fields: !parts', array('%name' => $title, '!parts' => implode(', ', $parts))));
    }
  }
}

/**
 * FAPI theme for an individual name element.
 */
function theme_name_element($element) {
  // Provides a nice clean wrapper for multiple fields.
  if (isset($element['#cardinality'])) {
    if ($element['#cardinality'] != 1) {
      return '<div class="name-field clearfix">' . $element['#children'] . '</div>';
    }
  }
  return '<div class="name-field clearfix">' . theme('form_element', $element) . '</div>';
}
